import asyncio
from aiohttp import ClientError, ClientResponseError, TCPConnector, ClientSession, DummyCookieJar


async def test():
    connector = TCPConnector(enable_cleanup_closed=True)
    session = ClientSession(connector=connector, cookie_jar=DummyCookieJar())
    # session = ClientSession()
    account = Account(session, username="demo@demo.com", password="demo")
    print(vars(account))
    pools = await Pool.get_all_pools(session, account=account)   
    [pool, pool2] = pools
    await pool.sync_info()
    print(vars(pool))

loop = asyncio.get_event_loop()
# Blocking call which returns when the display_date() coroutine is done
loop.run_until_complete(test())
loop.close()